
/* Switched to maxima because SymPy was, unfortunately, just too slow!
I see why julia peeps were interested in their own.
$ instead of ; doesn't print output in maxima.
wxMaxima is pretty cool

actually, friCAS scores higher than Maxima in testing. definitely worth a try.
https://www.12000.org/my_notes/CAS_integration_tests/reports/rubi_4_16_1_graded/inch1.htm#x2-10001



*/

P_: P = p_1*t^6;
/* P_: P = sum(p[j]*t^j, j, 0, 5); */

simpsum: true$

/*declare(M,real);
declare(M,constant);
declare(M,integer);
declare(m,integer);
assume(cos(a) >= 0);
*/
assume(M > 0);

L_: L = sum(a[m]*cos(2*m*%pi*t/t_f), m, 1, 2) + sum(b[m]*sin(2*m*%pi*t/t_f), m, 1, 2);

X_: X = (P + L);
diffeq: X + diff(X,t, 1) + diff(X,t, 2) = alpha_v*'diff(u,t, 2) + beta_v*'diff(u,t, 1) + gamma_v*u;

diffeq: subst ([X_], diffeq);
diffeq: subst ([P_,L_], diffeq);

/*
So maxima asks this question:
assume(4*alpha_v*gamma_v-beta_v^2 > 0);
I don't know enough about DEs,
I think this means something about placements of poles and zeros in positive

I want to try out fricas (maybe via Sage?), it's supposed to be great
*/

display2d: false;

load(noninteractive);
/* instead of asking about conditions, prints all solutions - very cool */

sol: ode2(diffeq, u, t);

/*ps: ic2(sol, x=0, u=0, 'diff(u, x)=0);*/




/* P = p_0*t**0 + p_1*t**1 + p_2*t**2 + p_3*t**3 + p_4*t**4 + p_5*t**5
P = p_5*t**5
sympy.pprint(P)
*/
/*
# a_m = Function('a')(m)
# b_m = Function('b')(m)
# a = IndexedBase('a')
# b = IndexedBase('b')
#lamda = Sum(a[m] * cos(2 * 1 * pi * t / t_f), (m, 1, M)) + Sum(b[m] * sin(2 * 1 * pi * t / t_f), (m, 1, M))
# sympy doesn't like that either.

lamda = a_1 * cos(2 * 1 * pi * t / t_f) + b_1 * sin(2 * 1 * pi * t / t_f)

# rhs = (P + lamda) + Derivative(P + lamda, t) + Derivative(P + lamda, t, t)
rhs = P + lamda

lhs = (alpha_v*Derivative(u(t),t,t) + beta_v*Derivative(u(t),t) + gamma_v*u(t))

solution = dsolve(Eq(rhs, lhs), u(t), ics={u(0): 0})

#u(t).diff(t).subs(t, 1e-6): 1
sympy.pprint(sympy.simplify(solution))
#conclusion: it is definitely analytic to go from one to the other.
*/
